# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - run: yarn
      - run: yarn build
      - name: Create .env file
        run: |
          echo CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} >> .env
          echo CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }} >> .env
          echo CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }} >> .env
      - name: Create ssh folder
        run: mkdir ~/.ssh
      - name: Adding private key
        run: echo "${{ secrets.SSH_PRIVATE_KEY }}" >> ~/.ssh/id_rsa
      - name: Changing permissons of private key
        run: chmod 700 ~/.ssh/id_rsa
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Rsync files
        run: rsync -avz -r -e "ssh -i ./ssh/id_rsa" ./dist ./config ./assets .env Dockerfile.production Dockerfile.staging docker-compose.yml yarn.lock package.json ${{ secrets.USERNAME }}@${{ secrets.HOST }}:app
      - name: Run deploy command
        run: ssh -i ~/.ssh/id_rsa ${{ secrets.USERNAME }}@${{ secrets.HOST }} "cd app && sudo docker-compose up -d --build api-staging && sudo docker system prune -af"
