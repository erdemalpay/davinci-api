services:
  mongo:
    image: mongo:5
    container_name: davinci-db
    restart: always
    command: ['--replSet', 'rs0', '--bind_ip_all']
    volumes:
      - ./davinci-data:/data/db
    ports:
      - '27017:27017'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })' || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 30
  mongo-init-replica:
    image: mongo:5
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint:
      [
        'bash',
        '-lc',
        'mongosh --quiet --host davinci-db:27017 --eval ''try{rs.status()}catch(e){rs.initiate({_id:"rs0",members:[{_id:0,host:"davinci-db:27017"}]})}''',
      ]
    restart: 'no'
  davinci-redis-staging:
    image: redis:latest
    container_name: davinci-redis-staging
    restart: always
    ports:
      - '6379:6379'
  davinci-redis-production:
    image: redis:latest
    container_name: davinci-redis-production
    restart: always
    ports:
      - '6380:6379'
  davinci-api-production:
    build:
      context: ./
      dockerfile: ./Dockerfile.production
    container_name: davinci-api-production
    restart: always
    depends_on:
      - mongo
      - davinci-redis-production
    ports:
      - '8070:4000'
    volumes:
      - ./logs:/app/logs
  davinci-api-staging:
    build:
      context: ./
      dockerfile: ./Dockerfile.staging
    container_name: davinci-api-staging
    restart: always
    depends_on:
      - mongo
      - davinci-redis-staging
    ports:
      - '8080:4000'
    volumes:
      - ./logs:/app/logs-staging
